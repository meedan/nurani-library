<?php

require_once dirname(__FILE__) . '/nurani_library.inc';

/**
 * Implements hook_help().
 */
function nurani_library_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/nurani-library':
      return '<p>' . t("") . '</p>';
  }
}

/**
 * Implements hook_init().
 */
function nurani_library_init() {
  drupal_add_js(array('nuraniLibrary' => array(
    'baseUrl' => nurani_library_base_url(TRUE, FALSE, TRUE),
    'apiBasePath' => url('api') . '/',
  )), 'setting');
}

/**
 * Implements hook_menu().
 */
function nurani_library_menu() {
  $items = array();
  $items['admin/structure/nurani-library'] = array(
    'title' => 'Nurani Library',
    'description' => 'Manage Nurani Library configuration and works.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nurani_library_admin_form'),
    'access arguments' => array('administer content types'),
    'file' => 'nurani_library.admin.inc',
  );
  $items['admin/structure/nurani-library/connection'] = array(
    'title' => 'Connection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nurani_library_admin_form'),
    'access arguments' => array('administer content types'),
    'file' => 'nurani_library.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/nurani-library/connection/info'] = array(
    'title' => 'Information',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nurani_library_admin_form'),
    'access arguments' => array('administer content types'),
    'file' => 'nurani_library.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $weight = 1;
  foreach (nurani_library_backends() as $backend) {
    if (isset($backend['settings'])) {
      $item = array(
        'title' => $backend['name'] . ' Settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array($backend['settings']['callback']),
        'access arguments' => array('administer content types'),
        'type' => MENU_LOCAL_TASK,
        'weight' => $weight,
      );
      if (isset($backend['settings']['file'])) {
        $item['file'] = $backend['settings']['file'];
      }
      if (isset($backend['settings']['file path'])) {
        $item['file path'] = $backend['settings']['file path'];
      }
      $items['admin/structure/nurani-library/connection/' . $backend['name']] = $item;
    }
    $weight++;
  }
  $items['admin/structure/nurani-library/create-api-account'] = array(
    'title' => 'Create missing Nurani Library API account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nurani_library_create_api_account_form'),
    'access arguments' => array('administer users'),
    'file' => 'nurani_library.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_nurani_library_backend().
 */
function nurani_library_nurani_library_backend() {
  return array(
    array(
      'name' => 'REST',
      'description' => t("Remote Nurani Library server, using REST+JSON connection."),
      'settings' => array(
        'file' => 'nurani_library.admin.inc',
        'callback' => 'nurani_library_rest_settings_form',
      ),
    )
  );
}

/**
 * Implements hook_permission().
 */
function nurani_library_permission() {
  return array(
    'access nurani library' =>  array(
      'title' => t('Access the Nurani Library'),
    ),
    'view all nurani library annotations' =>  array(
      'title' => t('Can View All Nurani Library Annotations'),
    ),
    'edit all nurani library annotations' =>  array(
      'title' => t('Can Edit All Nurani Library Annotations'),
    ),
    'create nurani library annotations' =>  array(
      'title' => t('Create Nurani Library Annotations'),
    ),
    'update nurani library annotations' =>  array(
      'title' => t('Update Nurani Library Annotations'),
    ),
    'delete nurani library annotations' =>  array(
      'title' => t('Delete Nurani Library Annotations'),
    ),
  );
}

