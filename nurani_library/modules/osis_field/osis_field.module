<?php
// TODO: Low priority, Integrate the OSIS bible reference parser https://github.com/openbibleinfo/Bible-Passage-Reference-Parser.

/**
 * Implements hook_theme().
 */
function osis_field_theme($existing, $type, $theme, $path) {
  return array(
    'osis_field' => array(
      'render element' => 'element',
    ),
    'osis_field_formatter_osis_field_default' => array(
      'variables' => array('item' => NULL),
    ),
    'osis_field_formatter_osis_field_plain' => array(
      'variables' => array('item' => NULL),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function osis_field_field_info() {
  return array(
    'osis_field' => array(
      'label' => t('OSIS Identifier'),
      'description' => t('Store an OSIS identifier in the database.'),
      'default_widget' => 'osis_field',
      'default_formatter' => 'osis_field',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function osis_field_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form = array();

  if ($field['type'] == 'osis_field') {
    $form['works'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Works'),
      '#options' => nurani_library_work_options(),
      '#default_value' => $settings['works'],
      '#description' => t('Limit which texts (works) can be referenced by this field.'),
      '#required' => TRUE,
      '#disabled' => $has_data,
    );
  }

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function osis_field_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $form = array();
  // TODO: Field settings form here if necessary.
  return $form;
}

/**
 * Implements hook_field_is_empty().
 */
function osis_field_field_is_empty($item, $field) {
  return empty($item['osisID']) && empty($item['osisIDWork']);
}

/**
 * Implements hook_field_validate().
 */
function osis_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $value) {
    _osis_field_validate($items[$delta], $delta, $field, $entity, $instance);
  }
}

/**
 * Implements hook_field_presave().
 */
function osis_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $value) {
    _osis_field_process($items[$delta], $delta, $field, $entity);
  }
}

/**
 * Implements hook_field_prepare_view().
 */
function osis_field_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($items as $entity_id => $entity_items) {
    foreach ($entity_items as $delta => $value) {
      _osis_field_sanitize($items[$entity_id][$delta], $delta, $field, $instances[$entity_id], $entities[$entity_id]);
    }
  }
}

/**
 * Implements hook_field_widget_info().
 */
function osis_field_field_widget_info() {
  return array(
    'osis_field' => array(
      'label' => t('Text field'),
      'field types' => array('osis_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function osis_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => $instance['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Prepares the item attributes and url for storage.
 */
function _osis_field_process(&$item, $delta = 0, $field, $entity) {
  // TODO: Clean up the data here.
  $item['osisIDWork'] = trim($item['osisIDWork']);
  $item['osisID'] = trim($item['osisID']);
}

/**
 * Cleanup user-entered values for a osis_field field according to field settings.
 *
 * @param $item
 *   A single osis_field item, usually containing url, title, and attributes.
 * @param $delta
 *   The delta value if this field is one of multiple fields.
 * @param $field
 *   The CCK field definition.
 * @param $node
 *   The node containing this osis_field.
 */
function _osis_field_sanitize(&$item, $delta, &$field, $instance, &$node) {
  // TODO: Necessary to clean up $item['osisID']?
}

/**
 * Validates that the osis_field field has been entered properly.
 * 
 * Okay examples:
 *   Gen.1.1               Book + CH + Verse
 *   Gen.1.1-8             Book + CH + Verse Range
 *   Tob.1.1               Apocryphal book
 *   Quran.21.1            Quran Sura #21, Aya #1
 *
 * Not allowed (short forms):
 *   Gen                   Book
 *   Gen.1                 Book + CH
 */
function _osis_field_validate(&$item, $delta, $field, $node, $instance) {
  $nl = nurani_library();

  $work_key = $field['field_name'] .']['. $delta .'][osisIDWork';
  $osis_key = $field['field_name'] .']['. $delta .'][osisID';

  $work = $nl->getWork($item['osisIDWork']);
  if (!$work || !isset($work->id)) {
    form_set_error($work_key, t("Invalid work selected."));
    return;
  }

  $osis = explode('.', $item['osisID']);
  if (!$osis || count($osis) != 3) {
    form_set_error($osis_key, t("Invalid OSIS identifier, only full 'Book.Chapter.Verse' references are allowed."));
    return;
  }
  else if (!is_numeric($osis[1])) {
    form_set_error($osis_key, t("Invalid OSIS identifier, only numeric chapters are allowed."));
  }

  $verse = explode('-', $osis[2]);
  if (count($verse) <= 2) {
    foreach ($verse as $verse_number) {
      $test = $nl->search($work->name, $osis[0], $osis[1], $verse_number);
      if (empty($test)) {
        form_set_error($osis_key, t("Invalid OSIS identifier, could not locate the passage %work : %osis.", array('%work' => $item['osisIDWork'], '%osis' => $item['osisID'])));
        return;
      }
    } 
  }
  else {
    form_set_error($osis_key, t("Invalid OSIS identifier, verse format not recognized."));
  }
}

/**
 * Implements hook_element_info().
 */
function osis_field_element_info() {
  $elements = array();
  $elements['osis_field'] =  array(
    '#input' => TRUE,
    '#process' => array('osis_field_field_process'),
    '#theme' => 'osis_field',
    '#theme_wrappers' => array('form_element'),
  );
  return $elements;
}

/**
 * Process the osis_field type element before displaying the field.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $complete_form['#field_info'][$element['#field_name']].
 */
function osis_field_field_process($element, $form_state) {
  $instance = field_widget_instance($element, $form_state);
  $settings = $instance['settings'];

  $element['osisIDWork'] = array(
    '#type' => 'select',
    '#title' => t('Work'),
    '#default_value' => isset($element['#value']['osisIDWork']) ? $element['#value']['osisIDWork'] : NULL,
    '#options' => nurani_library_work_options(),
    '#required' => TRUE,
  );
  $element['osisID'] = array(
    '#type' => 'textfield',
    '#title' => t('OSIS identifier'),
    '#description' => t("Eg: <em>John.3.16</em> and <em>Quran.2.96-98</em>"),
    '#default_value' => isset($element['#value']['osisIDWork']) ? $element['#value']['osisIDWork'] : NULL,
    '#size' => 16,
    '#maxlength' => 64,
    '#required' => TRUE,
  );

  return $element;
}

/**
 * FAPI theme for an individual work elements.
 */
function theme_osis_field($vars) {
  drupal_add_css(drupal_get_path('module', 'osis_field') .'/osis_field.css');

  $element = $vars['element'];

  $output = '<div class="osis-field-inline-group clearfix">';
  $output .= drupal_render($element['osisIDWork']);
  $output .= drupal_render($element['osisID']);
  $output .= '</div>';
  return $output;
}

/**
 * Implements hook_field_formatter_info().
 */
function osis_field_field_formatter_info() {
  return array(
    'osis_field_default' => array(
      'label' => t('Default'),
      'field types' => array('osis_field'),
      'settings' =>  array(
        // TODO: Default field formatter settings, if necessary.
      ),
    ),
    'osis_field_unformatted' => array(
      'label' => t('Unformatted'),
      'field types' => array('osis_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function osis_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'osis_field') {
    // TODO: Field formatter settings form, if necessary.
  }

  return $element;
}

/**
 * Implements hook_field_formatter_view().
 */
function osis_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => theme('osis_field_formatter_'. $display['type'], array('item' => $item, 'field' => $instance)),
    );
  }
  return $elements;
}

/**
 * Theme function for 'Default' field formatter.
 */
function theme_osis_field_formatter_osis_field_default($variables) {
  $item = $variables['item'];

  // TODO: Make the default formatter more meaningful.
  $output = '';
  $output .= '<strong>Work:</strong> <span class="osisIDWork">' . $item['osisIDWork'] . '</span> ';
  $output .= '<strong>OSIS identifier:</strong> <span class="osisID">' . $item['osisID'] . '</span>';

  return $output;
}

/**
 * Theme function for 'Unfomatted' field formatter.
 */
function theme_osis_field_formatter_osis_field_unformatted($variables) {
  $item = $variables['item'];
  return $item['osisIDWork'] . ':' . $item['osisID'];
}
