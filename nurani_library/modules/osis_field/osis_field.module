<?php

// TODO: Validate entered osisID data, create an EASY API for validating osisID data.  Must take into account the work type (eg: incl. apocrypha).
// TODO: Properly sanitize data before putting in the DB.
// TODO: Also sanitize data before displaying on the screen!


// ---- Low priority
// TODO: Integrate the OSIS bible reference parser https://github.com/openbibleinfo/Bible-Passage-Reference-Parser.
// TODO: Build an autocompleter / picker widget type (low priority).

require_once dirname(__FILE__) . '/osis_field.inc';

/**
 * Implements hook_menu().
 */
function osis_field_menu() {
  $items = array();
  $items['admin/structure/osis-field'] = array(
    'title' => 'OSIS Texts',
    'description' => 'Manage the texts available to OSIS fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osis_field_texts_form'),
    'access arguments' => array('administer content types'),
    'file' => 'osis_field.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function osis_field_theme($existing, $type, $theme, $path) {
  return array(
    'osis_field_texts_form_table' => array(
      'render element' => 'element',
      'file' => 'osis_field.admin.inc',
    ),
    'osis_field' => array(
      'render element' => 'element',
    ),
    'osis_field_formatter_osis_field_default' => array(
      'variables' => array('item' => NULL),
    ),
    'osis_field_formatter_osis_field_plain' => array(
      'variables' => array('item' => NULL),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function osis_field_field_info() {
  return array(
    'osis_field' => array(
      'label' => t('OSIS Identifier'),
      'description' => t('Store an OSIS identifier in the database.'),
      'default_widget' => 'osis_field',
      'default_formatter' => 'osis_field',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function osis_field_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form = array();

  if ($field['type'] == 'osis_field') {
    $form['texts'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Texts'),
      '#options' => osis_field_text_options(),
      '#default_value' => $settings['texts'],
      '#description' => t('Limit which texts can be referenced by this field.'),
      '#required' => TRUE,
      '#disabled' => $has_data,
    );
  }

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function osis_field_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $form = array();
  // $form['min'] = array(
  //   '#type' => 'textfield',
  //   '#title' => t('Minimum'),
  //   '#default_value' => $settings['min'],
  //   '#description' => t('The minimum value that should be allowed in this field. Leave blank for no minimum.'),
  //   '#element_validate' => array('element_validate_osis_field'),
  // );
  return $form;
}

/**
 * Implements hook_field_is_empty().
 */
function osis_field_field_is_empty($item, $field) {
  return empty($item['osisID']) && empty($item['osisIDWork']);
}

/**
 * Implements hook_field_validate().
 */
function osis_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $value) {
    _osis_field_validate($items[$delta], $delta, $field, $entity, $instance);
  }
}

/**
 * Implements hook_field_presave().
 */
function osis_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $value) {
    _osis_field_process($items[$delta], $delta, $field, $entity);
  }
}

/**
 * Implements hook_field_prepare_view().
 */
function osis_field_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($items as $entity_id => $entity_items) {
    foreach ($entity_items as $delta => $value) {
      _osis_field_sanitize($items[$entity_id][$delta], $delta, $field, $instances[$entity_id], $entities[$entity_id]);
    }
  }
}

/**
 * Implements hook_field_widget_info().
 */
function osis_field_field_widget_info() {
  return array(
    'osis_field' => array(
      'label' => t('Text field'),
      'field types' => array('osis_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function osis_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => $instance['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Prepares the item attributes and url for storage.
 */
function _osis_field_process(&$item, $delta = 0, $field, $entity) {
  // TODO: Clean up the data here.
  $item['osisIDWork'] = trim($item['osisIDWork']);
  $item['osisID'] = trim($item['osisID']);
}

/**
 * Cleanup user-entered values for a osis_field field according to field settings.
 *
 * @param $item
 *   A single osis_field item, usually containing url, title, and attributes.
 * @param $delta
 *   The delta value if this field is one of multiple fields.
 * @param $field
 *   The CCK field definition.
 * @param $node
 *   The node containing this osis_field.
 */
function _osis_field_sanitize(&$item, $delta, &$field, $instance, &$node) {
  // // Replace URL tokens.
  // if (isset($instance['settings']['enable_tokens']) && $instance['settings']['enable_tokens']) {
  //   global $user;
  //   // Load the node if necessary for nodes in views.
  //   $token_node = isset($node->nid) ? node_load($node->nid) : $node;
  //   $item['url'] = token_replace($item['url'], array('node' => $token_node));
  // }

  // $type = osis_field_validate_url($item['url']);
  // // If we can't determine the type of url, and we've been told not to validate it,
  // // then we assume it's a LINK_EXTERNAL type for later processing. #357604
  // if ($type == FALSE && $instance['settings']['validate_url'] === 0) {
  //   $type = LINK_EXTERNAL;
  // }
  // $url = osis_field_cleanup_url($item['url']);
}


/**
 * Validates that the osis_field field has been entered properly.
 */
function _osis_field_validate(&$item, $delta, $field, $node, $instance) {
  // Ex:
  // *  Gen.1.1               Book + CH + Verse
  // *  Gen.1.1-8             Book + CH + Verse Range
  // *  Tob.1.1               Apocryphal book
  // *  Quran.21.1            Quran Sura #21, Aya #1

  // Not allowed (short forms):
  // *  Gen                   Book
  // *  Gen.1                 Book + CH


  // if ($item['osisIDWork']
  //     && !(isset($instance['default_value'][$delta]['osisIDWork'])
  //     && $item['osisIDWork'] === $instance['default_value'][$delta]['uosisIDWorkrl']
  //     && !$instance['required'])) {
  //   // Validate the osis_field.
  //   if (osis_field_validate_url(trim($item['url'])) == FALSE) {
  //     form_set_error($field['field_name'] .']['. $delta .'][url', t('Not a valid URL.'));
  //   }
  //   // Require a title for the osis_field if necessary.
  //   if ($instance['settings']['title'] == 'required' && strlen(trim($item['title'])) == 0) {
  //     form_set_error($field['field_name'] .']['. $delta .'][title', t('Titles are required for all osis_fields.'));
  //   }
  // }
  // // Require a osis_field if we have a title.
  // if ($instance['settings']['url'] !== 'optional'
  //     && strlen(isset($item['title']) ? $item['title'] : NULL) > 0
  //     && strlen(trim($item['url'])) == 0) {
  //   form_set_error($field['field_name'] .']['. $delta .'][url', t('You cannot enter a title without a osis_field url.'));
  // }
  // // In a totally bizzaro case, where URLs and titles are optional but the field is required, ensure there is at least one osis_field.
  // if ($instance['settings']['url'] === 'optional'
  //     && $instance['settings']['title'] === 'optional'
  //     && (strlen(trim($item['url'])) !== 0 || strlen(trim($item['title'])) !== 0)) {
  //   $optional_field_found = TRUE;
  // }
  // // Require entire field
  // if ($instance['settings']['url'] === 'optional'
  //   && $instance['settings']['title'] === 'optional'
  //   && $instance['required'] == 1
  //   && !$optional_field_found
  //   && isset($instance['id'])) {
  //   form_set_error($instance['field_name'] .'][0][title',
  //                  t('At least one title or URL must be entered.'));
  // }
}

/**
 * Implements hook_element_info().
 */
function osis_field_element_info() {
  $elements = array();
  $elements['osis_field'] =  array(
    '#input' => TRUE,
    '#process' => array('osis_field_field_process'),
    '#theme' => 'osis_field',
    '#theme_wrappers' => array('form_element'),
  );
  return $elements;
}

/**
 * Process the osis_field type element before displaying the field.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $complete_form['#field_info'][$element['#field_name']].
 */
function osis_field_field_process($element, $form_state) {
  $instance = field_widget_instance($element, $form_state);
  $settings = $instance['settings'];

  $element['osisIDWork'] = array(
    '#type' => 'select',
    '#title' => t('Work'),
    '#default_value' => isset($element['#value']['osisIDWork']) ? $element['#value']['osisIDWork'] : NULL,
    '#options' => osis_field_text_options(),
    '#required' => TRUE,
  );
  $element['osisID'] = array(
    '#type' => 'textfield',
    '#title' => t('OSIS identifier'),
    '#default_value' => isset($element['#value']['osisIDWork']) ? $element['#value']['osisIDWork'] : NULL,
    '#size' => 16,
    '#maxlength' => 64,
    '#required' => TRUE,
  );

  return $element;
}

/**
 * FAPI theme for an individual text elements.
 */
function theme_osis_field($vars) {
  drupal_add_css(drupal_get_path('module', 'osis_field') .'/osis_field.css');

  $element = $vars['element'];

  $output = '';
  $output .= drupal_render($element['osisIDWork']);
  $output .= drupal_render($element['osisID']);
  return $output;
}

/**
 * Implements hook_field_formatter_info().
 */
function osis_field_field_formatter_info() {
  return array(
    'osis_field_default' => array(
      'label' => t('Default'),
      'field types' => array('osis_field'),
      'settings' =>  array(
        // 'example_setting' => TRUE,
      ),
    ),
    'osis_field_unformatted' => array(
      'label' => t('Unformatted'),
      'field types' => array('osis_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function osis_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'osis_field') {
    // $element['example_setting'] = array(
    //   '#type' => 'select',
    //   '#title' => t('Example setting'),
    //   '#options' => array(1,2,3,4),
    //   '#default_value' => $settings['example_setting'],
    // );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_view().
 */
function osis_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => theme('osis_field_formatter_'. $display['type'], array('item' => $item, 'field' => $instance)),
    );
  }
  return $elements;
}

/**
 * Theme function for 'Default' field formatter.
 */
function theme_osis_field_formatter_osis_field_default($variables) {
  $item = $variables['item'];

  // TODO: Make the default formatter more meaningful.
  $output = '';
  $output .= '<strong>Work:</strong> <span class="osisIDWork">' . $item['osisIDWork'] . '</span> ';
  $output .= '<strong>OSIS identifier:</strong> <span class="osisID">' . $item['osisID'] . '</span>';

  return $output;
}

/**
 * Theme function for 'Unfomatted' field formatter.
 */
function theme_osis_field_formatter_osis_field_unformatted($variables) {
  $item = $variables['item'];
  return $item['osisIDWork'] . ':' . $item['osisID'];
}
