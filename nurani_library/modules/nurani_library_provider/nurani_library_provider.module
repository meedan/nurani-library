<?php

require_once dirname(__FILE__) . '/nurani_library_provider.inc';

/**
 * Implements hook_help().
 */
function nurani_library_provider_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/nurani-library/provider/works':
      return '<p>' . t("Works are container objects which house passages. At least one work record must be created before ") . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function nurani_library_provider_permission() {
  return array(
    'validate passages' =>  array(
      'title' => t('Validate Nurani Library passages'),
    ),
    'access nurani library' =>  array(
      'title' => t('Access the Nurani Library'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function nurani_library_provider_theme($existing, $type, $theme, $path) {
  return array(
    'nurani_library_provider_works_form_table' => array(
      'render element' => 'element',
      'file' => 'nurani_library_provider.admin.inc',
    ),
    'nurani_library_provider_import_form_table' => array(
      'render element' => 'element',
      'file' => 'nurani_library_provider.admin.inc',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function nurani_library_provider_menu() {
  $items = array();
  $items['admin/structure/nurani-library/provider'] = array(
    'title' => 'Provider',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nurani_library_provider_admin_form'),
    'access arguments' => array('administer content types'),
    'file' => 'nurani_library_provider.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/nurani-library/provider/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nurani_library_provider_admin_form'),
    'access arguments' => array('administer content types'),
    'file' => 'nurani_library_provider.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/nurani-library/provider/works'] = array(
    'title' => 'Works',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nurani_library_provider_works_form'),
    'access arguments' => array('administer content types'),
    'file' => 'nurani_library_provider.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
  );
  $items['admin/structure/nurani-library/provider/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nurani_library_provider_import_form'),
    'access arguments' => array('administer content types'),
    'file' => 'nurani_library_provider.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -4,
  );
  return $items;
}

/**
 * Implementation of hook_views_api().
 */
function nurani_library_provider_views_api() {
  return array(
    'api' => 3.0,
  );
}

/**
 * Implements hook_services_resources().
 */
function nurani_library_provider_services_resources() {
  return array(

    'passage' => array(
      'actions' => array(
        'validate' => array(
          'file' => array('type' => 'inc', 'module' => 'nurani_library_provider', 'name' => 'nurani_library_provider.resource'),
          'callback' => '_nurani_library_provider_api_passage_validate',
          'args' => array(
            array(
              'name' => 'osisID',
              'optional' => FALSE,
              'type' => 'string',
              'description' => 'The OSIS identifier of the passage to validate',
              'source' => array('data' => 'osisID'),
            ),
          ),
          'access arguments' => array('validate passages'),
        ),
      ),
      'retrieve' => array(
        'file' => array('type' => 'inc', 'module' => 'nurani_library_provider', 'name' => 'nurani_library_provider.resource'),
        'callback' => '_nurani_library_provider_api_passage_retrieve',
        'args' => array(
          array(
            'name' => 'osisID',
            'optional' => FALSE,
            'type' => 'string',
            'description' => 'The OSIS identifier of the passage to get',
            'source' => array('path' => 0),
          ),
        ),
        'access arguments' => array('access nurani library'),
      ),
      'index' => array(
        'file' => array('type' => 'inc', 'module' => 'nurani_library_provider', 'name' => 'nurani_library_provider.resource'),
        'callback' => '_nurani_library_provider_api_passage_index',
        'args' => array(
          array(
            'name' => 'page',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'The zero-based index of the page to get, defaults to 0.',
            'default value' => 0,
            'source' => array('param' => 'page'),
          ),
          array(
            'name' => 'parameters',
            'optional' => TRUE,
            'type' => 'array',
            'description' => 'Parameters array',
            'default value' => array(),
            'source' => array('param' => 'parameters'),
          ),
          array(
            'name' => 'pagesize',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Number of records to get per page.',
            'default value' => variable_get('nurani_library_provider_api_pagesize', 20),
            'source' => array('param' => 'pagesize'),
          ),
        ),
        'access arguments' => array('access nurani library'),
      ),
    ),

    'work' => array(
      'retrieve' => array(
        'file' => array('type' => 'inc', 'module' => 'nurani_library_provider', 'name' => 'nurani_library_provider.resource'),
        'callback' => '_nurani_library_provider_api_work_retrieve',
        'args' => array(
          array(
            'name' => 'name',
            'optional' => FALSE,
            'type' => 'string',
            'description' => 'The machine name of the work to get',
            'source' => array('path' => 0),
          ),
        ),
        'access arguments' => array('access nurani library'),
      ),
      'index' => array(
        'file' => array('type' => 'inc', 'module' => 'nurani_library_provider', 'name' => 'nurani_library_provider.resource'),
        'callback' => '_nurani_library_provider_api_work_index',
        'access arguments' => array('access nurani library'),
      ),
    ),

  );
}
